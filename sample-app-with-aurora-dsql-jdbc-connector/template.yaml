AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  AWSLambdaJava21WithDSQLJDBCConnector 
  Sample SAM Template

Parameters:
  Stage:
    Type: String
    Default: prod
    
  AuroraDSQLClusterId:
    Description: "Aurora DSQL Cluster ID"
    Type: String
    
Globals:
  Function:
    CodeUri: target/aws-lambda-java-21-with-aurora-dsql-jdbc-connector-1.0.0-SNAPSHOT.jar
    Runtime: java21
    #SnapStart:
      #ApplyOn: PublishedVersions     
    Timeout: 900 
    MemorySize: 1024
    Architectures:
      #- arm64
      - x86_64  
    #Tracing: Active
    Environment:
      Variables:
        JAVA_TOOL_OPTIONS: "-XX:+TieredCompilation -XX:TieredStopAtLevel=1"
        AURORA_DSQL_CLUSTER_ENDPOINT: !Sub ${AuroraDSQLClusterId}.dsql.${AWS::Region}.on.aws
        REGION: !Sub ${AWS::Region}

Resources:
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      #TracingEnabled: true
      Name: AWSLambdaJava21WithDSQLJDBCConnector 
      Description: Api for AWSLambdaJava21WithDSQLJDBCConnector
      AccessLogSetting:
        DestinationArn: !Sub ${MyApiLogGroup.Arn} # This Log Group is already created within our SAM Template
        Format: "{'integrationLatency':'$context.integrationLatency', 'latency':'$context.responseLatency', 'requestId':'$context.requestId', 'ip': '$context.identity.sourceIp', 'caller':'$context.identity.caller', 'user':'$context.identity.user','requestTime':'$context.requestTime', 'xrayTraceId':'$context.xrayTraceId', 'wafResponseCode':'$context.wafResponseCode', 'httpMethod':'$context.httpMethod','resourcePath':'$context.resourcePath', 'status':'$context.status','protocol':'$context.protocol', 'responseLength':'$context.responseLength' }"
      MethodSettings:
        - MetricsEnabled: True
          ResourcePath: '/*'
          HttpMethod: '*'
      Auth:
        ApiKeyRequired: true  # sets for all methods
  
        
  MyApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
       LogGroupName: !Sub "/aws/apigateway/${MyApi}"
       RetentionInDays: 7
      
  MyApiUsagePlan:
     Type: AWS::ApiGateway::UsagePlan
     DependsOn:  
        - MyApiStage
     Properties:
      ApiStages: 
        - ApiId: !Ref MyApi
          Stage: !Ref Stage
      UsagePlanName: AWSLambdaJava21WithDSQLJDBCConnector 
      Description: Usage plan for AWSLambdaJava21WithDSQLJDBCConnectorAPI
      Quota:
          Limit: 2000000
          Period: DAY
      Throttle:
          RateLimit:  10000
          BurstLimit: 5000   

  MyApiKey: 
    Type: AWS::ApiGateway::ApiKey
    DependsOn:  
       - MyApiStage
    Properties: 
      Name: "AWSLambdaJava21WithDSQLJDBCConnectorApiKey"
      Description: "AWSLambdaJava21WithDSQLJDBCConnector API Key"
      Enabled: true
      GenerateDistinctId: false
      Value: a6ZbcDefQW12BN56WEDQ7
      StageKeys:
        - RestApiId: !Ref MyApi
          StageName: !Ref Stage

  MyApiUsagePlanKey:
      Type: "AWS::ApiGateway::UsagePlanKey"
      DependsOn: 
      - MyApi
      Properties:
        KeyId: !Ref MyApiKey
        KeyType: API_KEY
        UsagePlanId: !Ref MyApiUsagePlan


  CreateOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: CreateOrderWithJava21AndDSQLJDBCConnectorLambda 
      AutoPublishAlias: liveVersion
      Handler: software.amazonaws.example.order.handler.CreateOrderHandler::handleRequest
      Policies:
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - dsql:DbConnectAdmin
              Resource: !Sub arn:aws:dsql:${AWS::Region}:${AWS::AccountId}:cluster/${AuroraDSQLClusterId}
              
      Events:
        GetRequestById:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /orders
            Method: post    

  CreateOrderFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${CreateOrderFunction}"
      RetentionInDays: 7

  CreateOrderWithPrimingFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: CreateOrderWithJava21AndDSQLJDBCConnectorWithPrimingLambda
      AutoPublishAlias: liveVersion
      Handler: software.amazonaws.example.order.handler.CreateOrderWithPrimingHandler::handleRequest
      Policies:
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - dsql:DbConnectAdmin
              Resource: !Sub arn:aws:dsql:${AWS::Region}:${AWS::AccountId}:cluster/${AuroraDSQLClusterId}
              
      Events:
        GetRequestById:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /ordersWithPriming
            Method: post    

  CreateOrderWithPrimingFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${CreateOrderWithPrimingFunction}"
      RetentionInDays: 7


  GetOrderByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetOrderByIdWithJava21AndDSQLJDBCConnectorLambda
      AutoPublishAlias: liveVersion
      Handler: software.amazonaws.example.order.handler.GetOrderByIdHandler::handleRequest
      Policies:
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - dsql:DbConnectAdmin
              Resource: !Sub arn:aws:dsql:${AWS::Region}:${AWS::AccountId}:cluster/${AuroraDSQLClusterId}
              
      Events:
        GetRequestById:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /orders/{id}
            Method: get     
            
            
  GetOrderByIdFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GetOrderByIdFunction}"
      RetentionInDays: 7

  GetOrderByIdWithPrimingFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetOrderByIdWithJava21AndDSQLJDBCConnectorWithPrimingLambda
      AutoPublishAlias: liveVersion
      Handler: software.amazonaws.example.order.handler.GetOrderByIdWithPrimingHandler::handleRequest
      Policies:
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - dsql:DbConnectAdmin
              Resource: !Sub arn:aws:dsql:${AWS::Region}:${AWS::AccountId}:cluster/${AuroraDSQLClusterId}
              
      Events:
        GetRequestById:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /ordersWithPriming/{id}
            Method: get     


  GetOrderByIdWithPrimingFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GetOrderByIdWithPrimingFunction}"
      RetentionInDays: 7

  

  GetOrdersByCreatedDatesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetOrdersByCreatedDatesWithJava21AndDSQLJDBCConnectorLambda
      AutoPublishAlias: liveVersion
      Handler: software.amazonaws.example.order.handler.GetOrdersByCreatedDatesHandler::handleRequest
      Policies:
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - dsql:DbConnectAdmin
              Resource: !Sub arn:aws:dsql:${AWS::Region}:${AWS::AccountId}:cluster/${AuroraDSQLClusterId}
              
      Events:
        GetRequestById:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /ordersByCreatedDates/{startDate}/{endDate}
            Method: get     
            
            
  GetOrdersByCreatedDatesFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GetOrdersByCreatedDatesFunction}"
      RetentionInDays: 7
  
  
  UpdateOrderStatusByOrderIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: UpdateOrderStatusByOrderIdWithJava21AndDSQLJDBCConnectorLambda
      AutoPublishAlias: liveVersion
      Handler: software.amazonaws.example.order.handler.UpdateOrderStatusByOrderIdHandler::handleRequest
      Policies:
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - dsql:DbConnectAdmin
              Resource: !Sub arn:aws:dsql:${AWS::Region}:${AWS::AccountId}:cluster/${AuroraDSQLClusterId}
              
      Events:
        GetRequestById:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /orders/updatestatus/{id}
            Method: put    

  UpdateOrderStatusByOrderIdFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${UpdateOrderStatusByOrderIdFunction}"
      RetentionInDays: 7


Outputs:
  AWSLambdaJava21WithAndDSQLJDBCConnectorAPIEndpoint:
    Description: "API Gateway endpoint URL for Prod stage for AWS Lambda Java 21 and with DSQL JDBC Connector"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/prod/orders"
